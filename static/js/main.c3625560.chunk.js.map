{"version":3,"sources":["BlogElement.js","App.js","serviceWorker.js","index.js"],"names":["BlogElement","id","title","content","date","tags","this","blogPosts","push","Date","App","className","map","item","key","toString","tag","style","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","onload","setTimeout","t","performance","timing","console","log","loadEventEnd","navigationStart","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAaeA,G,MAXX,WAAYC,EAAGC,EAAMC,EAAQC,EAAKC,GACjC,oBACGC,KAAKL,GAAKA,EACVK,KAAKJ,MAAQA,EACbI,KAAKH,QAAUA,EACfG,KAAKF,KAAOA,EACZE,KAAKD,KAAMA,ICIfE,EAAa,GACjBA,EAAUC,KAAK,IAAIR,EAAY,EAAE,WAAW,MAAM,IAAIS,KAAQ,CAAC,IAAI,IAAI,OACvEF,EAAUC,KAAK,IAAIR,EAAY,EAAE,WAAW,MAAM,IAAIS,KAAQ,CAAC,IAAI,IAAI,OACvEF,EAAUC,KAAK,IAAIR,EAAY,EAAE,WAAW,MAAM,IAAIS,KAAQ,CAAC,IAAI,IAAI,O,IA4CxDC,E,iLA3BT,OACE,yBAAKC,UAAU,OACZJ,EAAUK,KAAI,SAASC,GAEV,OAEI,yBAAKC,IAAOD,EAAKZ,IACjB,8BACE,4BAAKY,EAAKX,QAEZ,8BAAOW,EAAKV,SAAe,6BAC3B,8BAAOU,EAAKT,KAAKW,YAAkB,6BACnC,4BAAKF,EAAKR,KAAKO,KAAI,SAASI,GAE1B,OAAQ,wBAAIC,MADI,CAACC,MAAM,YACf,IAAsBF,EAAtB,kB,GA5BpBG,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SAGhDP,OAAOQ,OAAS,WACZC,YAAW,WACT,IAAIC,EAAIV,OAAOW,YAAYC,OAC3BC,QAAQC,IAAI,uBAAyBJ,EAAEK,aAAeL,EAAEM,iBAAiBtB,cACxE,IDqHD,kBAAmBuB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c3625560.chunk.js","sourcesContent":["\nclass BlogElement{\n    constructor(id,title,content,date,tags)\n    {\n        this.id = id;\n        this.title = title;\n        this.content = content;\n        this.date = date;\n        this.tags= tags;\n    }\n    \n}\n\nexport default BlogElement;\n","import React, { Component } from 'react';\nimport './App.css';\nimport BlogElement from './BlogElement'\n//import AppMarkdown from \"./assets/blogposts/example.md\"\n//import ReactMarkdown from 'react-markdown'; \n\n/*  \nlet newPost = new BlogElement(id,contents);\nid++;\nblogPosts.push(newPost);\n*/\n\nlet blogPosts =  [];\nblogPosts.push(new BlogElement(1,\"title ac\",\"abc\",new Date(), [\"a\",\"b\",\"c\"]));\nblogPosts.push(new BlogElement(2,\"title df\",\"def\",new Date(), [\"d\",\"e\",\"f\"]));\nblogPosts.push(new BlogElement(3,\"title gi\",\"ghi\",new Date(), [\"g\",\"h\",\"i\"]));\n\n\nclass App extends Component {\n  /*\n  constructor() {\n    super();\n    this.state = { markdown: '' };\n  }\n  \n  componentWillMount() {\n    // Get the contents from the Markdown file and put them in the React state, so we can reference it in render() below.\n    fetch(AppMarkdown).then(res => res.text()).then(text => this.setState({ markdown: text }));\n  }\n  */  \n  render(){    \n     \n      return ( // returns a div element with a transformed list of blogElements\n        <div className=\"App\">\n          {blogPosts.map(function(item){  // the transformation of blogElements to react components\n                      \n                        return (\n                          \n                            <div key = {item.id}>\n                            <span>\n                              <h1>{item.title}</h1>\n                            </span>\n                            <span>{item.content}</span><br/>\n                            <span>{item.date.toString()}</span><br/>\n                            <ol>{item.tags.map(function(tag){  // tags is also a list of tags\n                                const h3Style={color:'#0080ff'}; // pass a style object.. better to use a className\n                              return (<li style={h3Style}> {tag} </li>  );})}</ol>\n                            </div>\n                            \n                        );\n                      })\n          }          \n        </div>\n      );\n      \n  };\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// logging the loadTime only when the window is loaded\nwindow.onload = function(){\n    setTimeout(function(){\n      var t = window.performance.timing;\n      console.log(\"Loading time taken:\" + (t.loadEventEnd - t.navigationStart).toString());      \n    }, 0);\n  }\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n// use this to not refresh page every time. Instead only the application reloads and the logs stay\n// reloading does not happen and resources are not loaded again \n// most importantly tha application state remains, any windows opened or tabs clicked stay\nif (module.hot) {\n    module.hot.accept();\n    }"],"sourceRoot":""}